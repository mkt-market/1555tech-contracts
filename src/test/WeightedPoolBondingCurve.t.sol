// pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../bonding_curve/WeightedPoolBondingCurve.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract WeightedPoolBondingCurveTest is Test {
    WeightedPoolBondingCurve bondingCurve;
    uint256 constant weight = 5000; // 50%
    uint256 moneyInBondingCurve = 600e18; // 600 dollar

    function setUp() public {
        bondingCurve = new WeightedPoolBondingCurve(weight);
    }

    function testGetPriceSingle() public {
        uint80[200] memory expectedValuesTotal = [
            0,
            3015075377000000000,
            6060606061000000000,
            9137055838000000000,
            12244897960000000000,
            15384615380000000000,
            18556701030000000000,
            21761658030000000000,
            25000000000000000000,
            28272251310000000000,
            31578947370000000000,
            34920634920000000000,
            38297872340000000000,
            41711229950000000000,
            45161290320000000000,
            48648648650000000000,
            52173913040000000000,
            55737704920000000000,
            59340659340000000000,
            62983425410000000000,
            66666666670000000000,
            70391061450000000000,
            74157303370000000000,
            77966101690000000000,
            81818181820000000000,
            85714285710000000000,
            89655172410000000000,
            93641618500000000000,
            97674418600000000000,
            101754386000000000000,
            105882352900000000000,
            110059171600000000000,
            114285714300000000000,
            118562874300000000000,
            122891566300000000000,
            127272727300000000000,
            131707317100000000000,
            136196319000000000000,
            140740740700000000000,
            145341614900000000000,
            150000000000000000000,
            154716981100000000000,
            159493670900000000000,
            164331210200000000000,
            169230769200000000000,
            174193548400000000000,
            179220779200000000000,
            184313725500000000000,
            189473684200000000000,
            194701986800000000000,
            200000000000000000000,
            205369127500000000000,
            210810810800000000000,
            216326530600000000000,
            221917808200000000000,
            227586206900000000000,
            233333333300000000000,
            239160839200000000000,
            245070422500000000000,
            251063829800000000000,
            257142857100000000000,
            263309352500000000000,
            269565217400000000000,
            275912408800000000000,
            282352941200000000000,
            288888888900000000000,
            295522388100000000000,
            302255639100000000000,
            309090909100000000000,
            316030534400000000000,
            323076923100000000000,
            330232558100000000000,
            337500000000000000000,
            344881889800000000000,
            352380952400000000000,
            360000000000000000000,
            367741935500000000000,
            375609756100000000000,
            383606557400000000000,
            391735537200000000000,
            400000000000000000000,
            408403361300000000000,
            416949152500000000000,
            425641025600000000000,
            434482758600000000000,
            443478260900000000000,
            452631578900000000000,
            461946902700000000000,
            471428571400000000000,
            481081081100000000000,
            490909090900000000000,
            500917431200000000000,
            511111111100000000000,
            521495327100000000000,
            532075471700000000000,
            542857142900000000000,
            553846153800000000000,
            565048543700000000000,
            576470588200000000000,
            588118811900000000000,
            600000000000000000000,
            612121212100000000000,
            624489795900000000000,
            637113402100000000000,
            650000000000000000000,
            663157894700000000000,
            676595744700000000000,
            690322580600000000000,
            704347826100000000000,
            718681318700000000000,
            733333333300000000000,
            748314606700000000000,
            763636363600000000000,
            779310344800000000000,
            795348837200000000000,
            811764705900000000000,
            828571428600000000000,
            845783132500000000000,
            863414634100000000000,
            881481481500000000000,
            900000000000000000000,
            918987341800000000000,
            938461538500000000000,
            958441558400000000000,
            978947368400000000000,
            1000000000000000000000,
            1021621622000000000000,
            1043835616000000000000,
            1066666667000000000000,
            1090140845000000000000,
            1114285714000000000000,
            1139130435000000000000,
            1164705882000000000000,
            1191044776000000000000,
            1218181818000000000000,
            1246153846000000000000,
            1275000000000000000000,
            1304761905000000000000,
            1335483871000000000000,
            1367213115000000000000,
            1400000000000000000000,
            1433898305000000000000,
            1468965517000000000000,
            1505263158000000000000,
            1542857143000000000000,
            1581818182000000000000,
            1622222222000000000000,
            1664150943000000000000,
            1707692308000000000000,
            1752941176000000000000,
            1800000000000000000000,
            1848979592000000000000,
            1900000000000000000000,
            1953191489000000000000,
            2008695652000000000000,
            2066666667000000000000,
            2127272727000000000000,
            2190697674000000000000,
            2257142857000000000000,
            2326829268000000000000,
            2400000000000000000000,
            2476923077000000000000,
            2557894737000000000000,
            2643243243000000000000,
            2733333333000000000000,
            2828571429000000000000,
            2929411765000000000000,
            3036363636000000000000,
            3150000000000000000000,
            3270967742000000000000,
            3400000000000000000000,
            3537931034000000000000,
            3685714286000000000000,
            3844444444000000000000,
            4015384615000000000000,
            4200000000000000000000,
            4400000000000000000000,
            4617391304000000000000,
            4854545455000000000000,
            5114285714000000000000,
            5400000000000000000000,
            5715789474000000000000,
            6066666667000000000000,
            6458823529000000000000,
            6900000000000000000000,
            7400000000000000000000,
            7971428571000000000000,
            8630769231000000000000,
            9400000000000000000000,
            10309090910000000000000,
            11400000000000000000000,
            12733333330000000000000,
            14400000000000000000000,
            16542857140000000000000,
            19400000000000000000000,
            23400000000000000000000,
            29400000000000000000000,
            39400000000000000000000,
            59400000000000000000000,
            119400000000000000000000
        ];
        for (uint256 i = 0; i < 199; i++) {
            // Price goes to infinity when the last one is bought (as expected) -> do not test this, causes division by zero
            (uint256 multiplier, uint256 fee) = bondingCurve.getPriceAndFee(i, 200 - i, 1);
            uint256 price = (multiplier * moneyInBondingCurve) / 1e18;
            uint256 expectedPrice = expectedValuesTotal[i + 1] - expectedValuesTotal[i];
            assertApproxEqRel(price, expectedPrice, 0.01e18); // Allow 1% deviation
        }
    }

    function testGetPriceAmount() public {
        uint80[199] memory expectedValues = [
            3015075377000000000,
            6060606061000000000,
            9137055838000000000,
            12244897960000000000,
            15384615380000000000,
            18556701030000000000,
            21761658030000000000,
            25000000000000000000,
            28272251310000000000,
            31578947370000000000,
            34920634920000000000,
            38297872340000000000,
            41711229950000000000,
            45161290320000000000,
            48648648650000000000,
            52173913040000000000,
            55737704920000000000,
            59340659340000000000,
            62983425410000000000,
            66666666670000000000,
            70391061450000000000,
            74157303370000000000,
            77966101690000000000,
            81818181820000000000,
            85714285710000000000,
            89655172410000000000,
            93641618500000000000,
            97674418600000000000,
            101754386000000000000,
            105882352900000000000,
            110059171600000000000,
            114285714300000000000,
            118562874300000000000,
            122891566300000000000,
            127272727300000000000,
            131707317100000000000,
            136196319000000000000,
            140740740700000000000,
            145341614900000000000,
            150000000000000000000,
            154716981100000000000,
            159493670900000000000,
            164331210200000000000,
            169230769200000000000,
            174193548400000000000,
            179220779200000000000,
            184313725500000000000,
            189473684200000000000,
            194701986800000000000,
            200000000000000000000,
            205369127500000000000,
            210810810800000000000,
            216326530600000000000,
            221917808200000000000,
            227586206900000000000,
            233333333300000000000,
            239160839200000000000,
            245070422500000000000,
            251063829800000000000,
            257142857100000000000,
            263309352500000000000,
            269565217400000000000,
            275912408800000000000,
            282352941200000000000,
            288888888900000000000,
            295522388100000000000,
            302255639100000000000,
            309090909100000000000,
            316030534400000000000,
            323076923100000000000,
            330232558100000000000,
            337500000000000000000,
            344881889800000000000,
            352380952400000000000,
            360000000000000000000,
            367741935500000000000,
            375609756100000000000,
            383606557400000000000,
            391735537200000000000,
            400000000000000000000,
            408403361300000000000,
            416949152500000000000,
            425641025600000000000,
            434482758600000000000,
            443478260900000000000,
            452631578900000000000,
            461946902700000000000,
            471428571400000000000,
            481081081100000000000,
            490909090900000000000,
            500917431200000000000,
            511111111100000000000,
            521495327100000000000,
            532075471700000000000,
            542857142900000000000,
            553846153800000000000,
            565048543700000000000,
            576470588200000000000,
            588118811900000000000,
            600000000000000000000,
            612121212100000000000,
            624489795900000000000,
            637113402100000000000,
            650000000000000000000,
            663157894700000000000,
            676595744700000000000,
            690322580600000000000,
            704347826100000000000,
            718681318700000000000,
            733333333300000000000,
            748314606700000000000,
            763636363600000000000,
            779310344800000000000,
            795348837200000000000,
            811764705900000000000,
            828571428600000000000,
            845783132500000000000,
            863414634100000000000,
            881481481500000000000,
            900000000000000000000,
            918987341800000000000,
            938461538500000000000,
            958441558400000000000,
            978947368400000000000,
            1000000000000000000000,
            1021621622000000000000,
            1043835616000000000000,
            1066666667000000000000,
            1090140845000000000000,
            1114285714000000000000,
            1139130435000000000000,
            1164705882000000000000,
            1191044776000000000000,
            1218181818000000000000,
            1246153846000000000000,
            1275000000000000000000,
            1304761905000000000000,
            1335483871000000000000,
            1367213115000000000000,
            1400000000000000000000,
            1433898305000000000000,
            1468965517000000000000,
            1505263158000000000000,
            1542857143000000000000,
            1581818182000000000000,
            1622222222000000000000,
            1664150943000000000000,
            1707692308000000000000,
            1752941176000000000000,
            1800000000000000000000,
            1848979592000000000000,
            1900000000000000000000,
            1953191489000000000000,
            2008695652000000000000,
            2066666667000000000000,
            2127272727000000000000,
            2190697674000000000000,
            2257142857000000000000,
            2326829268000000000000,
            2400000000000000000000,
            2476923077000000000000,
            2557894737000000000000,
            2643243243000000000000,
            2733333333000000000000,
            2828571429000000000000,
            2929411765000000000000,
            3036363636000000000000,
            3150000000000000000000,
            3270967742000000000000,
            3400000000000000000000,
            3537931034000000000000,
            3685714286000000000000,
            3844444444000000000000,
            4015384615000000000000,
            4200000000000000000000,
            4400000000000000000000,
            4617391304000000000000,
            4854545455000000000000,
            5114285714000000000000,
            5400000000000000000000,
            5715789474000000000000,
            6066666667000000000000,
            6458823529000000000000,
            6900000000000000000000,
            7400000000000000000000,
            7971428571000000000000,
            8630769231000000000000,
            9400000000000000000000,
            10309090910000000000000,
            11400000000000000000000,
            12733333330000000000000,
            14400000000000000000000,
            16542857140000000000000,
            19400000000000000000000,
            23400000000000000000000,
            29400000000000000000000,
            39400000000000000000000,
            59400000000000000000000,
            119400000000000000000000
        ];
        for (uint256 i = 1; i < 200; i++) {
            (uint256 multiplier, uint256 fee) = bondingCurve.getPriceAndFee(0, 200, i);
            uint256 price = (multiplier * moneyInBondingCurve) / 1e18;
            assertApproxEqRel(price, expectedValues[i - 1], 0.01e18); // Allow 1% deviation
        }
    }
}
